lg() {
    export LAZYGIT_NEW_DIR_FILE=~/.lazygit/newdir

    lazygit "$@"

    if [ -f $LAZYGIT_NEW_DIR_FILE ]; then
            cd "$(cat $LAZYGIT_NEW_DIR_FILE)"
            rm -f $LAZYGIT_NEW_DIR_FILE > /dev/null
    fi
}

function redis() {
    docker exec -it redis-www redis-cli $*
}

function mongo() {
    docker exec -it mongo-www mongo $*
}

function pgadmin4() {
	docker run --publish 5050:5050 --volume=pga4volume:/var/lib/pgadmin --env "PGADMIN_SETUP_EMAIL=nkhine@shieldpay.com" --env "PGADMIN_SETUP_PASSWORD=a" --name=pgadmin4 --hostname=pgadmin4 --network=pgnetwork --detach crunchydata/crunchy-pgadmin4:centos7-10.9-2.4.1
}

function pgadmin4stop() {
	docker stop pgadmin4 && docker rm pgadmin4
}

# ec2-session ubuntu i-1234abcd
ec2-session() {
		local user="$1"
		local instance="$2"
		aws ssm start-session \
				--target "${instance}" \
				--document-name AWS-StartInteractiveCommand \
				--parameters command="sudo su - ${user}"
}

#function php() {
#    appname=$(basename `pwd -P`)
#    appname="${appname/-/}"
#    imagename='php:cli-alpine'
#    #output=$(docker images | grep "${appname}_phpserver")
#    #if [ "$?" = "0" ]; then
#    #    imagename="${appname}_phpserver"
#    #fi
#    docker run -ti --rm -v $(pwd):/app -w /app $imagename php $*
#}
#
#function composer() {
#    appname=$(basename `pwd -P`)
#    appname="${appname/-/}"
#    imagename='composer/composer'
#    #output=$(docker images | grep "${appname}_composer")
#    #if [ "$?" = "0" ]; then
#    #    imagename="${appname}_composer"
#    #fi
#    tty=
#    tty -s && tty=--tty
#    docker run \
#        $tty \
#        --interactive \
#        --rm \
#        --volume ~/.composer:/root/.composer \
#        --volume $(pwd):/app \
#        --volume ~/.ssh:/root/.ssh \
#        $imagename $*
#}

#alias docker-compose='docker run --rm \
#    -v /var/run/docker.sock:/var/run/docker.sock \
#    -v "$PWD:/rootfs/$PWD" \
#    -w="/rootfs/$PWD" \
#    docker/compose'

alias k='kubectl'
alias ktx='kubectx'
alias kns='kubens'
alias kdump='kubectl get all --output wide --all-namespaces'
alias kgn="kubectl get nodes -o wide"
alias ktn="kubectl top nodes"
alias ktp="kubectl top pods --all-namespaces"
alias klft="klf --tail 100"

# tmux
# alias tmuxinit="tmux new-session -n init \; split-window -dh \; select-pane -t 1 \; split-window -dv -p 80 'ctop' \; clock-mode \; select-pane -t 2 \; split-window -dv 'gotop -c monokai' \; select-pane -t 0 \; new-window -n htop 'htop' \; select-window -t 1"



alias jenkins='java -jar /home/khine/.local/bin/jenkins-cli.jar -auth khinester:746e73fa2317f867b5a304ed7449136f -s http://localhost:8080/ '
# cd, ls, grep
alias l="ls -lF -h --color=auto"
alias la="ls -laF -h --color=auto"
#alias grep="grep -r -InH --color=auto"
alias ./='cd $HOME/go/src/github.com/Shieldpay'
alias ..="cd .."
alias -- -="cd -"
# lit up the keyboard back-lights
function mkd() {
    mkdir -p "$@" && cd "$@"
}

#alias bal="ballerina"
alias pj='npx projen'

alias bfg="java -jar $HOME/Packages/bfg-1.14.0.jar"
alias ansible='docker run -v "${PWD}":/work:ro --rm ansible:latest'
#alias ansible-playbook='docker run -v "${PWD}":/work:ro -v ~/.ansible/roles:/root/.ansible/roles -v ~/.ssh:/root/.ssh:ro --rm ansible:latest ansible-playbook'
alias ansible-playbook='docker run -v "${PWD}":/work:ro --rm ansible:latest ansible-playbook'
alias ansible-vault='docker run -v "${PWD}":/work:ro --rm ansible:latest ansible-vault'

alias tf=terraform
#alias nvim=nvim.appimage

alias vmrss='$HOME/go/src/github.com/ThePrimeagen/vmrss/vmrss'
alias lzd='lazydocker'

alias vim=nvim

validateYaml() {
    python -c 'import yaml,sys;yaml.safe_load(sys.stdin)' < $1
}

alias accounts='go run $INFRA/scripts/profiles.go'

function login() {
    local profile="$1"
    $INFRA/scripts/login.sh \
        --profile "${profile}"
}

alias ls="eza --color=always --long --git --icons=always --no-user --no-permissions --no-time --no-filesize"
alias cd="z"